//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Jide O on 11/18/16.
//  Copyright Â© 2016 Bevi Mobile. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    
    @IBOutlet weak var mainImageView: UIView!
    @IBOutlet weak var cameraFlip: UIButton!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var overlayView: UIView!
    
    let imagePicker = UIImagePickerController()

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        imagePicker.delegate = self
        imagePicker.allowsEditing = false
        imagePicker.sourceType = .camera
        imagePicker.cameraDevice = .front
        imagePicker.showsCameraControls = false
        LibraryAPI.sharedInstance().cameraType = .Front
        
        let tap = UITapGestureRecognizer()
        tap.addTarget(self, action: #selector(MessagesViewController.imagePressed(tap:)))
        
        imagePicker.view.isUserInteractionEnabled = false

        view.addGestureRecognizer(tap)
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        print("called first")
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        mainImageView.insertSubview(imagePicker.view, belowSubview: overlayView)
        searchEnded()
    }
    
    func searchStarted() {
        overlayView.isHidden = false
        activityIndicator.startAnimating()
        view.isUserInteractionEnabled = false
    }
    
    func searchEnded() {
        overlayView.isHidden = true
        activityIndicator.stopAnimating()
        view.isUserInteractionEnabled = true
    }
    
    func imagePressed(tap: UITapGestureRecognizer) {
        imagePicker.takePicture()
        searchStarted()
    }
    
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        imagePicker.view.frame = mainImageView.bounds
    }

    @IBAction func cameraFlipPressed(_ sender: UIButton) {
        if imagePicker.cameraDevice == .front {
            imagePicker.cameraDevice = .rear
            LibraryAPI.sharedInstance().cameraType = .Rear
        } else {
            imagePicker.cameraDevice = .front
            LibraryAPI.sharedInstance().cameraType = .Front
        }
    }
    
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
        print("did transition")
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        print("ran")
        let image = info[UIImagePickerControllerOriginalImage] as? UIImage
        if image != nil {
           // UIImageWriteToSavedPhotosAlbum(image, nil, nil, nil);
            
           // APIRequest.fetchImageType(image: image!, camera: cameraType)
            APIRequest.fetchImageType(image: image!, completion: { (text: [String]?) in
                 DispatchQueue.main.async {
                    if let text = text {
                        for str in text {
                            let emoji = EmojiLibrary.getEmoji(text: str)
                            if let emoji = emoji {
                                self.activeConversation?.insertText(emoji + str, completionHandler: nil)
                            } else {
                                self.activeConversation?.insertText(str, completionHandler: nil)
                            }
                        }
                    }
                    self.searchEnded()
                }
            })
        }
    }
    
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
    }


}
